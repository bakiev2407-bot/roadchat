const path = require('path');
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const __dirname = path.resolve();

// –°–æ–∑–¥–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä
const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// –ó–∞–¥–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–¥–∞—á—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
app.use(express.static(__dirname));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö GET-–∑–∞–ø—Ä–æ—Å–æ–≤ - –æ—Ç–¥–∞–µ–º index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// –ü—Ä–∏–º–µ—Ä "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏
let users = {};
let messages = [];
let onlineCount = 0;

// –§–∏–ª—å—Ç—Ä —Å—Ç–æ–ø-—Å–ª–æ–≤
const bannedWords = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '–º–∞—Ç', '–¥—Ç–ø —Å –ª–µ—Ç–∞–ª—å–Ω—ã–º –∏—Å—Ö–æ–¥–æ–º'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
function containsBannedWords(text) {
  const lowerText = text.toLowerCase();
  return bannedWords.some(word => lowerText.includes(word));
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ WebSocket
io.on('connection', (socket) => {
  console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');
  onlineCount++;
  io.emit('update online', onlineCount);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  socket.emit('load messages', messages);
  socket.emit('update total', Object.keys(users).length);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  socket.on('user auth', (userData) => {
    try {
      if (!userData || !userData.email || !userData.password) {
        socket.emit('auth error', '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
      }

      if (!users[userData.email]) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[userData.email] = { 
          password: userData.password,
          messages: [],
          lastMessageTime: null
        };
        console.log(`üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.email}`);
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if (users[userData.email].password !== userData.password) {
          socket.emit('auth error', '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
          return;
        }
        console.log(`üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: ${userData.email}`);
      }
      
      socket.userData = userData;
      socket.emit('auth success', userData.email);
      
    } catch (error) {
      console.error('Auth error:', error);
      socket.emit('auth error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  socket.on('new message', (msgText) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (!socket.userData) {
        socket.emit('message error', '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!msgText || msgText.trim() === '') {
        socket.emit('message error', '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
      if (msgText.length > 500) {
        socket.emit('message error', '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
      if (containsBannedWords(msgText)) {
        socket.emit('message error', '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.');
        return;
      }

      const user = users[socket.userData.email];
      const now = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 30 —Å–µ–∫—É–Ω–¥)
      if (user.lastMessageTime && (now - user.lastMessageTime) < 30000) {
        const timeLeft = Math.ceil((30000 - (now - user.lastMessageTime)) / 1000);
        socket.emit('message error', `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫.`);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      user.lastMessageTime = now;

      // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const newMessage = {
        text: msgText.trim(),
        user: socket.userData.email,
        time: new Date().toLocaleTimeString('ru-RU'),
        timestamp: now
      };

      messages.push(newMessage);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      if (messages.length > 100) {
        messages = messages.slice(-100);
      }

      // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      io.emit('new message', newMessage);
      console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${newMessage.user}: ${newMessage.text}`);

    } catch (error) {
      console.error('Message error:', error);
      socket.emit('message error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('disconnect', (reason) => {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${reason}`);
    onlineCount = Math.max(0, onlineCount - 1);
    io.emit('update online', onlineCount);
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`üöó –°–µ—Ä–≤–µ—Ä RoadChat –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
});