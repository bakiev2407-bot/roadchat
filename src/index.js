// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const express = require('express');
const http = require('http');
const path = require('path');
const socketIo = require('socket.io');

// –°–æ–∑–¥–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä
const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// –ó–∞–¥–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–≤–æ–∑—å–º–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 3000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
const PORT = process.env.PORT || 3000;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ —Å–ª—É—à–∞–µ–º –ø–æ—Ä—Ç
server.listen(PORT, () => {
  console.log(`üöó –°–µ—Ä–≤–µ—Ä RoadChat –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
});

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–¥–∞—á—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'public'
app.use(express.static(path.join(__dirname, '..'))); // –¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä –≤–∏–¥–∏—Ç index.html, style.css –≤ –∫–æ—Ä–Ω–µ

// –ü—Ä–∏–º–µ—Ä "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" –ø—Ä—è–º–æ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
// –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É—Ç—Å—è!
let users = {};
let messages = [];
let onlineCount = 0;

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ñ–∏–ª—å—Ç—Ä —Å—Ç–æ–ø-—Å–ª–æ–≤ (–º–æ–∂–Ω–æ –∏ –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const bannedWords = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ', '–º–∞—Ç', '–¥—Ç–ø —Å –ª–µ—Ç–∞–ª—å–Ω—ã–º –∏—Å—Ö–æ–¥–æ–º'];

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ WebSocket
io.on('connection', (socket) => {
  console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');
  onlineCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω
  io.emit('update online', onlineCount); // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ —é–∑–µ—Ä–æ–≤
  socket.emit('load messages', messages);
  socket.emit('update total', Object.keys(users).length);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  socket.on('user auth', (userData) => {
    // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–∞ –ë–î –∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π!
    if (!users[userData.email]) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      users[userData.email] = { 
        password: userData.password, // –í–ù–ò–ú–ê–ù–ò–ï: –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –Ω—É–∂–Ω–æ —Ö—ç—à–∏—Ä–æ–≤–∞—Ç—å!
        messages: [] 
      };
      console.log(`üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.email}`);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–µ–Ω—å —É—Å–ª–æ–≤–Ω–æ!)
      if (users[userData.email].password !== userData.password) {
        socket.emit('auth error', '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        return;
      }
      console.log(`üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: ${userData.email}`);
    }
    // –ï—Å–ª–∏ –≤—Å—ë –æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ —Å–æ–∫–µ—Ç–∞ –∏ —à–ª–µ–º —É—Å–ø–µ—Ö
    socket.userData = userData;
    socket.emit('auth success', userData.email);
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  socket.on('new message', (msgText) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!socket.userData) {
      socket.emit('message error', '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!');
      return;
    }

    // 1. –ü–†–û–í–ï–†–ö–ê –ù–ê –°–¢–û–ü-–°–õ–û–í–ê
    const hasBannedWord = bannedWords.some(word => msgText.toLowerCase().includes(word));
    if (hasBannedWord) {
      socket.emit('message error', '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.');
      return;
    }

    const user = users[socket.userData.email];
    const now = Date.now();

    // 2. –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –í–†–ï–ú–ï–ù–ò (1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 30 —Å–µ–∫—É–Ω–¥)
    if (user.lastMessageTime && (now - user.lastMessageTime) < 30000) {
      const timeLeft = Math.ceil((30000 - (now - user.lastMessageTime)) / 1000);
      socket.emit('message error', `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${timeLeft} —Å–µ–∫.`);
      return;
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user.lastMessageTime = now;

    // 3. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage = {
      text: msgText,
      user: socket.userData.email, // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –∏–º—è
      time: new Date().toLocaleTimeString('ru-RU') // –í—Ä–µ–º—è –≤ —Ä—É—Å—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    };

    messages.push(newMessage); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    // –ß—Ç–æ–±—ã –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Ä–æ—Å–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
    if (messages.length > 100) messages.shift();

    // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('new message', newMessage);
    console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${newMessage.user}: ${newMessage.text}`);
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('disconnect', () => {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    onlineCount--;
    io.emit('update online', onlineCount); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –¥–ª—è –≤—Å–µ—Ö
  });
});